// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.3
// source: proto/carddeck.proto

package cardDeck

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeckType int32

const (
	DeckType_PUBLIC  DeckType = 0
	DeckType_PRIVATE DeckType = 1
	DeckType_INVALID DeckType = 2
)

// Enum value maps for DeckType.
var (
	DeckType_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
		2: "INVALID",
	}
	DeckType_value = map[string]int32{
		"PUBLIC":  0,
		"PRIVATE": 1,
		"INVALID": 2,
	}
)

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}

func (x DeckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_carddeck_proto_enumTypes[0].Descriptor()
}

func (DeckType) Type() protoreflect.EnumType {
	return &file_proto_carddeck_proto_enumTypes[0]
}

func (x DeckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckType.Descriptor instead.
func (DeckType) EnumDescriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{0}
}

type GroupDecksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GroupDecksRequest) Reset() {
	*x = GroupDecksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDecksRequest) ProtoMessage() {}

func (x *GroupDecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDecksRequest.ProtoReflect.Descriptor instead.
func (*GroupDecksRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{0}
}

func (x *GroupDecksRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GroupDecksRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type GroupDecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decks []*Deck `protobuf:"bytes,1,rep,name=decks,proto3" json:"decks,omitempty"`
}

func (x *GroupDecksResponse) Reset() {
	*x = GroupDecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDecksResponse) ProtoMessage() {}

func (x *GroupDecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDecksResponse.ProtoReflect.Descriptor instead.
func (*GroupDecksResponse) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{1}
}

func (x *GroupDecksResponse) GetDecks() []*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

type Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckID   string   `protobuf:"bytes,1,opt,name=deckID,proto3" json:"deckID,omitempty"`
	DeckName string   `protobuf:"bytes,2,opt,name=deckName,proto3" json:"deckName,omitempty"`
	DeckType DeckType `protobuf:"varint,3,opt,name=deckType,proto3,enum=cardDeck.DeckType" json:"deckType,omitempty"`
}

func (x *Deck) Reset() {
	*x = Deck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{2}
}

func (x *Deck) GetDeckID() string {
	if x != nil {
		return x.DeckID
	}
	return ""
}

func (x *Deck) GetDeckName() string {
	if x != nil {
		return x.DeckName
	}
	return ""
}

func (x *Deck) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_PUBLIC
}

type DeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckID    string   `protobuf:"bytes,1,opt,name=deckID,proto3" json:"deckID,omitempty"`
	DeckName  string   `protobuf:"bytes,2,opt,name=deckName,proto3" json:"deckName,omitempty"`
	CreatedAt int64    `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	GroupID   string   `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
	DeckType  DeckType `protobuf:"varint,5,opt,name=deckType,proto3,enum=cardDeck.DeckType" json:"deckType,omitempty"`
}

func (x *DeckResponse) Reset() {
	*x = DeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckResponse) ProtoMessage() {}

func (x *DeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckResponse.ProtoReflect.Descriptor instead.
func (*DeckResponse) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{3}
}

func (x *DeckResponse) GetDeckID() string {
	if x != nil {
		return x.DeckID
	}
	return ""
}

func (x *DeckResponse) GetDeckName() string {
	if x != nil {
		return x.DeckName
	}
	return ""
}

func (x *DeckResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DeckResponse) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *DeckResponse) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_PUBLIC
}

type CreateDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID  string   `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	DeckName string   `protobuf:"bytes,3,opt,name=deckName,proto3" json:"deckName,omitempty"`
	DeckType DeckType `protobuf:"varint,4,opt,name=deckType,proto3,enum=cardDeck.DeckType" json:"deckType,omitempty"`
}

func (x *CreateDeckRequest) Reset() {
	*x = CreateDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeckRequest) ProtoMessage() {}

func (x *CreateDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeckRequest.ProtoReflect.Descriptor instead.
func (*CreateDeckRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDeckRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateDeckRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CreateDeckRequest) GetDeckName() string {
	if x != nil {
		return x.DeckName
	}
	return ""
}

func (x *CreateDeckRequest) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_PUBLIC
}

type IDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *IDResponse) Reset() {
	*x = IDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDResponse) ProtoMessage() {}

func (x *IDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDResponse.ProtoReflect.Descriptor instead.
func (*IDResponse) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{5}
}

func (x *IDResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ModifyDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string    `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	DeckID   string    `protobuf:"bytes,2,opt,name=deckID,proto3" json:"deckID,omitempty"`
	DeckName *string   `protobuf:"bytes,3,opt,name=deckName,proto3,oneof" json:"deckName,omitempty"`
	DeckType *DeckType `protobuf:"varint,4,opt,name=deckType,proto3,enum=cardDeck.DeckType,oneof" json:"deckType,omitempty"`
}

func (x *ModifyDeckRequest) Reset() {
	*x = ModifyDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyDeckRequest) ProtoMessage() {}

func (x *ModifyDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyDeckRequest.ProtoReflect.Descriptor instead.
func (*ModifyDeckRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{6}
}

func (x *ModifyDeckRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ModifyDeckRequest) GetDeckID() string {
	if x != nil {
		return x.DeckID
	}
	return ""
}

func (x *ModifyDeckRequest) GetDeckName() string {
	if x != nil && x.DeckName != nil {
		return *x.DeckName
	}
	return ""
}

func (x *ModifyDeckRequest) GetDeckType() DeckType {
	if x != nil && x.DeckType != nil {
		return *x.DeckType
	}
	return DeckType_PUBLIC
}

type SuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SuccessResponse) Reset() {
	*x = SuccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessResponse) ProtoMessage() {}

func (x *SuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessResponse.ProtoReflect.Descriptor instead.
func (*SuccessResponse) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{7}
}

func (x *SuccessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type IDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	EntityID string `protobuf:"bytes,2,opt,name=entityID,proto3" json:"entityID,omitempty"`
}

func (x *IDRequest) Reset() {
	*x = IDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDRequest) ProtoMessage() {}

func (x *IDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDRequest.ProtoReflect.Descriptor instead.
func (*IDRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{8}
}

func (x *IDRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IDRequest) GetEntityID() string {
	if x != nil {
		return x.EntityID
	}
	return ""
}

type DeckCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *DeckCardsResponse) Reset() {
	*x = DeckCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckCardsResponse) ProtoMessage() {}

func (x *DeckCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckCardsResponse.ProtoReflect.Descriptor instead.
func (*DeckCardsResponse) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{9}
}

func (x *DeckCardsResponse) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID string      `protobuf:"bytes,1,opt,name=cardID,proto3" json:"cardID,omitempty"`
	Sides  []*CardSide `protobuf:"bytes,2,rep,name=sides,proto3" json:"sides,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{10}
}

func (x *Card) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *Card) GetSides() []*CardSide {
	if x != nil {
		return x.Sides
	}
	return nil
}

type CardSide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardSideID  string `protobuf:"bytes,1,opt,name=cardSideID,proto3" json:"cardSideID,omitempty"`
	Header      string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CardSide) Reset() {
	*x = CardSide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardSide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardSide) ProtoMessage() {}

func (x *CardSide) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardSide.ProtoReflect.Descriptor instead.
func (*CardSide) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{11}
}

func (x *CardSide) GetCardSideID() string {
	if x != nil {
		return x.CardSideID
	}
	return ""
}

func (x *CardSide) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *CardSide) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CardSideContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CardSideContent) Reset() {
	*x = CardSideContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardSideContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardSideContent) ProtoMessage() {}

func (x *CardSideContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardSideContent.ProtoReflect.Descriptor instead.
func (*CardSideContent) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{12}
}

func (x *CardSideContent) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *CardSideContent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string             `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	DeckID string             `protobuf:"bytes,2,opt,name=deckID,proto3" json:"deckID,omitempty"`
	Sides  []*CardSideContent `protobuf:"bytes,3,rep,name=sides,proto3" json:"sides,omitempty"`
}

func (x *CreateCardRequest) Reset() {
	*x = CreateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardRequest) ProtoMessage() {}

func (x *CreateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardRequest.ProtoReflect.Descriptor instead.
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCardRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateCardRequest) GetDeckID() string {
	if x != nil {
		return x.DeckID
	}
	return ""
}

func (x *CreateCardRequest) GetSides() []*CardSideContent {
	if x != nil {
		return x.Sides
	}
	return nil
}

type ModifyCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string             `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CardID string             `protobuf:"bytes,2,opt,name=cardID,proto3" json:"cardID,omitempty"`
	Sides  []*CardSideContent `protobuf:"bytes,3,rep,name=sides,proto3" json:"sides,omitempty"`
}

func (x *ModifyCardRequest) Reset() {
	*x = ModifyCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCardRequest) ProtoMessage() {}

func (x *ModifyCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCardRequest.ProtoReflect.Descriptor instead.
func (*ModifyCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyCardRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ModifyCardRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *ModifyCardRequest) GetSides() []*CardSideContent {
	if x != nil {
		return x.Sides
	}
	return nil
}

type CreateCardSideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                string           `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CardID                string           `protobuf:"bytes,2,opt,name=cardID,proto3" json:"cardID,omitempty"`
	PlaceBeforeCardSideID string           `protobuf:"bytes,3,opt,name=placeBeforeCardSideID,proto3" json:"placeBeforeCardSideID,omitempty"`
	Content               *CardSideContent `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CreateCardSideRequest) Reset() {
	*x = CreateCardSideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardSideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardSideRequest) ProtoMessage() {}

func (x *CreateCardSideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardSideRequest.ProtoReflect.Descriptor instead.
func (*CreateCardSideRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCardSideRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateCardSideRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *CreateCardSideRequest) GetPlaceBeforeCardSideID() string {
	if x != nil {
		return x.PlaceBeforeCardSideID
	}
	return ""
}

func (x *CreateCardSideRequest) GetContent() *CardSideContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type ModifyCardSideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string           `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CardSideID string           `protobuf:"bytes,2,opt,name=cardSideID,proto3" json:"cardSideID,omitempty"`
	Content    *CardSideContent `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *ModifyCardSideRequest) Reset() {
	*x = ModifyCardSideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_carddeck_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCardSideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCardSideRequest) ProtoMessage() {}

func (x *ModifyCardSideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_carddeck_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCardSideRequest.ProtoReflect.Descriptor instead.
func (*ModifyCardSideRequest) Descriptor() ([]byte, []int) {
	return file_proto_carddeck_proto_rawDescGZIP(), []int{16}
}

func (x *ModifyCardSideRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ModifyCardSideRequest) GetCardSideID() string {
	if x != nil {
		return x.CardSideID
	}
	return ""
}

func (x *ModifyCardSideRequest) GetContent() *CardSideContent {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_proto_carddeck_proto protoreflect.FileDescriptor

var file_proto_carddeck_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b,
	0x22, 0x45, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x64, 0x65,
	0x63, 0x6b, 0x73, 0x22, 0x6a, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xb3,
	0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x3f, 0x0a, 0x09, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x22, 0x39, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63,
	0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x48, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x05, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x05, 0x73, 0x69, 0x64, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x0f, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x05, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x69, 0x64, 0x65, 0x73,
	0x22, 0x74, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x69, 0x64, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x73, 0x69, 0x64, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x63, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x15,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2a, 0x30, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x02, 0x32, 0xfd, 0x06, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1b,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x13,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x63, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x2e, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x3b, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_carddeck_proto_rawDescOnce sync.Once
	file_proto_carddeck_proto_rawDescData = file_proto_carddeck_proto_rawDesc
)

func file_proto_carddeck_proto_rawDescGZIP() []byte {
	file_proto_carddeck_proto_rawDescOnce.Do(func() {
		file_proto_carddeck_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_carddeck_proto_rawDescData)
	})
	return file_proto_carddeck_proto_rawDescData
}

var file_proto_carddeck_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_carddeck_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_carddeck_proto_goTypes = []interface{}{
	(DeckType)(0),                 // 0: cardDeck.DeckType
	(*GroupDecksRequest)(nil),     // 1: cardDeck.GroupDecksRequest
	(*GroupDecksResponse)(nil),    // 2: cardDeck.GroupDecksResponse
	(*Deck)(nil),                  // 3: cardDeck.Deck
	(*DeckResponse)(nil),          // 4: cardDeck.DeckResponse
	(*CreateDeckRequest)(nil),     // 5: cardDeck.CreateDeckRequest
	(*IDResponse)(nil),            // 6: cardDeck.IDResponse
	(*ModifyDeckRequest)(nil),     // 7: cardDeck.ModifyDeckRequest
	(*SuccessResponse)(nil),       // 8: cardDeck.SuccessResponse
	(*IDRequest)(nil),             // 9: cardDeck.IDRequest
	(*DeckCardsResponse)(nil),     // 10: cardDeck.DeckCardsResponse
	(*Card)(nil),                  // 11: cardDeck.Card
	(*CardSide)(nil),              // 12: cardDeck.CardSide
	(*CardSideContent)(nil),       // 13: cardDeck.CardSideContent
	(*CreateCardRequest)(nil),     // 14: cardDeck.CreateCardRequest
	(*ModifyCardRequest)(nil),     // 15: cardDeck.ModifyCardRequest
	(*CreateCardSideRequest)(nil), // 16: cardDeck.CreateCardSideRequest
	(*ModifyCardSideRequest)(nil), // 17: cardDeck.ModifyCardSideRequest
}
var file_proto_carddeck_proto_depIdxs = []int32{
	3,  // 0: cardDeck.GroupDecksResponse.decks:type_name -> cardDeck.Deck
	0,  // 1: cardDeck.Deck.deckType:type_name -> cardDeck.DeckType
	0,  // 2: cardDeck.DeckResponse.deckType:type_name -> cardDeck.DeckType
	0,  // 3: cardDeck.CreateDeckRequest.deckType:type_name -> cardDeck.DeckType
	0,  // 4: cardDeck.ModifyDeckRequest.deckType:type_name -> cardDeck.DeckType
	11, // 5: cardDeck.DeckCardsResponse.cards:type_name -> cardDeck.Card
	12, // 6: cardDeck.Card.sides:type_name -> cardDeck.CardSide
	13, // 7: cardDeck.CreateCardRequest.sides:type_name -> cardDeck.CardSideContent
	13, // 8: cardDeck.ModifyCardRequest.sides:type_name -> cardDeck.CardSideContent
	13, // 9: cardDeck.CreateCardSideRequest.content:type_name -> cardDeck.CardSideContent
	13, // 10: cardDeck.ModifyCardSideRequest.content:type_name -> cardDeck.CardSideContent
	1,  // 11: cardDeck.CardDeck.GetGroupDecks:input_type -> cardDeck.GroupDecksRequest
	5,  // 12: cardDeck.CardDeck.CreateDeck:input_type -> cardDeck.CreateDeckRequest
	9,  // 13: cardDeck.CardDeck.GetDeck:input_type -> cardDeck.IDRequest
	7,  // 14: cardDeck.CardDeck.ModifyDeck:input_type -> cardDeck.ModifyDeckRequest
	9,  // 15: cardDeck.CardDeck.DeleteDeck:input_type -> cardDeck.IDRequest
	9,  // 16: cardDeck.CardDeck.GetDeckCards:input_type -> cardDeck.IDRequest
	14, // 17: cardDeck.CardDeck.CreateCard:input_type -> cardDeck.CreateCardRequest
	9,  // 18: cardDeck.CardDeck.GetCard:input_type -> cardDeck.IDRequest
	15, // 19: cardDeck.CardDeck.ModifyCard:input_type -> cardDeck.ModifyCardRequest
	9,  // 20: cardDeck.CardDeck.DeleteCard:input_type -> cardDeck.IDRequest
	16, // 21: cardDeck.CardDeck.CreateCardSide:input_type -> cardDeck.CreateCardSideRequest
	17, // 22: cardDeck.CardDeck.ModifyCardSide:input_type -> cardDeck.ModifyCardSideRequest
	9,  // 23: cardDeck.CardDeck.DeleteCardSide:input_type -> cardDeck.IDRequest
	2,  // 24: cardDeck.CardDeck.GetGroupDecks:output_type -> cardDeck.GroupDecksResponse
	6,  // 25: cardDeck.CardDeck.CreateDeck:output_type -> cardDeck.IDResponse
	4,  // 26: cardDeck.CardDeck.GetDeck:output_type -> cardDeck.DeckResponse
	8,  // 27: cardDeck.CardDeck.ModifyDeck:output_type -> cardDeck.SuccessResponse
	8,  // 28: cardDeck.CardDeck.DeleteDeck:output_type -> cardDeck.SuccessResponse
	10, // 29: cardDeck.CardDeck.GetDeckCards:output_type -> cardDeck.DeckCardsResponse
	6,  // 30: cardDeck.CardDeck.CreateCard:output_type -> cardDeck.IDResponse
	11, // 31: cardDeck.CardDeck.GetCard:output_type -> cardDeck.Card
	8,  // 32: cardDeck.CardDeck.ModifyCard:output_type -> cardDeck.SuccessResponse
	8,  // 33: cardDeck.CardDeck.DeleteCard:output_type -> cardDeck.SuccessResponse
	6,  // 34: cardDeck.CardDeck.CreateCardSide:output_type -> cardDeck.IDResponse
	8,  // 35: cardDeck.CardDeck.ModifyCardSide:output_type -> cardDeck.SuccessResponse
	8,  // 36: cardDeck.CardDeck.DeleteCardSide:output_type -> cardDeck.SuccessResponse
	24, // [24:37] is the sub-list for method output_type
	11, // [11:24] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_carddeck_proto_init() }
func file_proto_carddeck_proto_init() {
	if File_proto_carddeck_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_carddeck_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDecksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardSide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardSideContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardSideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_carddeck_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCardSideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_carddeck_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_carddeck_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_carddeck_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_carddeck_proto_goTypes,
		DependencyIndexes: file_proto_carddeck_proto_depIdxs,
		EnumInfos:         file_proto_carddeck_proto_enumTypes,
		MessageInfos:      file_proto_carddeck_proto_msgTypes,
	}.Build()
	File_proto_carddeck_proto = out.File
	file_proto_carddeck_proto_rawDesc = nil
	file_proto_carddeck_proto_goTypes = nil
	file_proto_carddeck_proto_depIdxs = nil
}
