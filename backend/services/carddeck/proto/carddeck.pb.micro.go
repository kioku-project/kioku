// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/carddeck/proto/carddeck.proto

package cardDeck

import (
	fmt "fmt"
	proto1 "github.com/kioku-project/kioku/pkg/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CardDeck service

func NewCardDeckEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CardDeck service

type CardDeckService interface {
	GetGroupDecks(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Decks, error)
	CreateDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Deck, error)
	CopyDeck(ctx context.Context, in *CopyDeckRequest, opts ...client.CallOption) (*proto1.Deck, error)
	GetDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Deck, error)
	ModifyDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error)
	DeleteDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error)
	GetDeckCards(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Cards, error)
	CreateCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Card, error)
	GetCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Card, error)
	ModifyCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Success, error)
	DeleteCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Success, error)
	CreateCardSide(ctx context.Context, in *proto1.CardSideRequest, opts ...client.CallOption) (*proto1.CardSide, error)
	ModifyCardSide(ctx context.Context, in *proto1.CardSideRequest, opts ...client.CallOption) (*proto1.Success, error)
	DeleteCardSide(ctx context.Context, in *proto1.CardSideRequest, opts ...client.CallOption) (*proto1.Success, error)
	GetUserFavoriteDecks(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Decks, error)
	AddUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error)
	DeleteUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error)
	GetUserActiveDecks(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Decks, error)
	AddUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error)
	DeleteUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error)
}

type cardDeckService struct {
	c    client.Client
	name string
}

func NewCardDeckService(name string, c client.Client) CardDeckService {
	return &cardDeckService{
		c:    c,
		name: name,
	}
}

func (c *cardDeckService) GetGroupDecks(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Decks, error) {
	req := c.c.NewRequest(c.name, "CardDeck.GetGroupDecks", in)
	out := new(proto1.Decks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) CreateDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Deck, error) {
	req := c.c.NewRequest(c.name, "CardDeck.CreateDeck", in)
	out := new(proto1.Deck)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) CopyDeck(ctx context.Context, in *CopyDeckRequest, opts ...client.CallOption) (*proto1.Deck, error) {
	req := c.c.NewRequest(c.name, "CardDeck.CopyDeck", in)
	out := new(proto1.Deck)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) GetDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Deck, error) {
	req := c.c.NewRequest(c.name, "CardDeck.GetDeck", in)
	out := new(proto1.Deck)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) ModifyDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.ModifyDeck", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) DeleteDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.DeleteDeck", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) GetDeckCards(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Cards, error) {
	req := c.c.NewRequest(c.name, "CardDeck.GetDeckCards", in)
	out := new(proto1.Cards)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) CreateCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Card, error) {
	req := c.c.NewRequest(c.name, "CardDeck.CreateCard", in)
	out := new(proto1.Card)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) GetCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Card, error) {
	req := c.c.NewRequest(c.name, "CardDeck.GetCard", in)
	out := new(proto1.Card)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) ModifyCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.ModifyCard", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) DeleteCard(ctx context.Context, in *proto1.CardRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.DeleteCard", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) CreateCardSide(ctx context.Context, in *proto1.CardSideRequest, opts ...client.CallOption) (*proto1.CardSide, error) {
	req := c.c.NewRequest(c.name, "CardDeck.CreateCardSide", in)
	out := new(proto1.CardSide)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) ModifyCardSide(ctx context.Context, in *proto1.CardSideRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.ModifyCardSide", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) DeleteCardSide(ctx context.Context, in *proto1.CardSideRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.DeleteCardSide", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) GetUserFavoriteDecks(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Decks, error) {
	req := c.c.NewRequest(c.name, "CardDeck.GetUserFavoriteDecks", in)
	out := new(proto1.Decks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) AddUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.AddUserFavoriteDeck", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) DeleteUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.DeleteUserFavoriteDeck", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) GetUserActiveDecks(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Decks, error) {
	req := c.c.NewRequest(c.name, "CardDeck.GetUserActiveDecks", in)
	out := new(proto1.Decks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) AddUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.AddUserActiveDeck", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardDeckService) DeleteUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "CardDeck.DeleteUserActiveDeck", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CardDeck service

type CardDeckHandler interface {
	GetGroupDecks(context.Context, *proto1.GroupRequest, *proto1.Decks) error
	CreateDeck(context.Context, *proto1.DeckRequest, *proto1.Deck) error
	CopyDeck(context.Context, *CopyDeckRequest, *proto1.Deck) error
	GetDeck(context.Context, *proto1.DeckRequest, *proto1.Deck) error
	ModifyDeck(context.Context, *proto1.DeckRequest, *proto1.Success) error
	DeleteDeck(context.Context, *proto1.DeckRequest, *proto1.Success) error
	GetDeckCards(context.Context, *proto1.DeckRequest, *proto1.Cards) error
	CreateCard(context.Context, *proto1.CardRequest, *proto1.Card) error
	GetCard(context.Context, *proto1.CardRequest, *proto1.Card) error
	ModifyCard(context.Context, *proto1.CardRequest, *proto1.Success) error
	DeleteCard(context.Context, *proto1.CardRequest, *proto1.Success) error
	CreateCardSide(context.Context, *proto1.CardSideRequest, *proto1.CardSide) error
	ModifyCardSide(context.Context, *proto1.CardSideRequest, *proto1.Success) error
	DeleteCardSide(context.Context, *proto1.CardSideRequest, *proto1.Success) error
	GetUserFavoriteDecks(context.Context, *proto1.User, *proto1.Decks) error
	AddUserFavoriteDeck(context.Context, *proto1.DeckRequest, *proto1.Success) error
	DeleteUserFavoriteDeck(context.Context, *proto1.DeckRequest, *proto1.Success) error
	GetUserActiveDecks(context.Context, *proto1.User, *proto1.Decks) error
	AddUserActiveDeck(context.Context, *proto1.DeckRequest, *proto1.Success) error
	DeleteUserActiveDeck(context.Context, *proto1.DeckRequest, *proto1.Success) error
}

func RegisterCardDeckHandler(s server.Server, hdlr CardDeckHandler, opts ...server.HandlerOption) error {
	type cardDeck interface {
		GetGroupDecks(ctx context.Context, in *proto1.GroupRequest, out *proto1.Decks) error
		CreateDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Deck) error
		CopyDeck(ctx context.Context, in *CopyDeckRequest, out *proto1.Deck) error
		GetDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Deck) error
		ModifyDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error
		DeleteDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error
		GetDeckCards(ctx context.Context, in *proto1.DeckRequest, out *proto1.Cards) error
		CreateCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Card) error
		GetCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Card) error
		ModifyCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Success) error
		DeleteCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Success) error
		CreateCardSide(ctx context.Context, in *proto1.CardSideRequest, out *proto1.CardSide) error
		ModifyCardSide(ctx context.Context, in *proto1.CardSideRequest, out *proto1.Success) error
		DeleteCardSide(ctx context.Context, in *proto1.CardSideRequest, out *proto1.Success) error
		GetUserFavoriteDecks(ctx context.Context, in *proto1.User, out *proto1.Decks) error
		AddUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error
		DeleteUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error
		GetUserActiveDecks(ctx context.Context, in *proto1.User, out *proto1.Decks) error
		AddUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error
		DeleteUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error
	}
	type CardDeck struct {
		cardDeck
	}
	h := &cardDeckHandler{hdlr}
	return s.Handle(s.NewHandler(&CardDeck{h}, opts...))
}

type cardDeckHandler struct {
	CardDeckHandler
}

func (h *cardDeckHandler) GetGroupDecks(ctx context.Context, in *proto1.GroupRequest, out *proto1.Decks) error {
	return h.CardDeckHandler.GetGroupDecks(ctx, in, out)
}

func (h *cardDeckHandler) CreateDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Deck) error {
	return h.CardDeckHandler.CreateDeck(ctx, in, out)
}

func (h *cardDeckHandler) CopyDeck(ctx context.Context, in *CopyDeckRequest, out *proto1.Deck) error {
	return h.CardDeckHandler.CopyDeck(ctx, in, out)
}

func (h *cardDeckHandler) GetDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Deck) error {
	return h.CardDeckHandler.GetDeck(ctx, in, out)
}

func (h *cardDeckHandler) ModifyDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error {
	return h.CardDeckHandler.ModifyDeck(ctx, in, out)
}

func (h *cardDeckHandler) DeleteDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error {
	return h.CardDeckHandler.DeleteDeck(ctx, in, out)
}

func (h *cardDeckHandler) GetDeckCards(ctx context.Context, in *proto1.DeckRequest, out *proto1.Cards) error {
	return h.CardDeckHandler.GetDeckCards(ctx, in, out)
}

func (h *cardDeckHandler) CreateCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Card) error {
	return h.CardDeckHandler.CreateCard(ctx, in, out)
}

func (h *cardDeckHandler) GetCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Card) error {
	return h.CardDeckHandler.GetCard(ctx, in, out)
}

func (h *cardDeckHandler) ModifyCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Success) error {
	return h.CardDeckHandler.ModifyCard(ctx, in, out)
}

func (h *cardDeckHandler) DeleteCard(ctx context.Context, in *proto1.CardRequest, out *proto1.Success) error {
	return h.CardDeckHandler.DeleteCard(ctx, in, out)
}

func (h *cardDeckHandler) CreateCardSide(ctx context.Context, in *proto1.CardSideRequest, out *proto1.CardSide) error {
	return h.CardDeckHandler.CreateCardSide(ctx, in, out)
}

func (h *cardDeckHandler) ModifyCardSide(ctx context.Context, in *proto1.CardSideRequest, out *proto1.Success) error {
	return h.CardDeckHandler.ModifyCardSide(ctx, in, out)
}

func (h *cardDeckHandler) DeleteCardSide(ctx context.Context, in *proto1.CardSideRequest, out *proto1.Success) error {
	return h.CardDeckHandler.DeleteCardSide(ctx, in, out)
}

func (h *cardDeckHandler) GetUserFavoriteDecks(ctx context.Context, in *proto1.User, out *proto1.Decks) error {
	return h.CardDeckHandler.GetUserFavoriteDecks(ctx, in, out)
}

func (h *cardDeckHandler) AddUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error {
	return h.CardDeckHandler.AddUserFavoriteDeck(ctx, in, out)
}

func (h *cardDeckHandler) DeleteUserFavoriteDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error {
	return h.CardDeckHandler.DeleteUserFavoriteDeck(ctx, in, out)
}

func (h *cardDeckHandler) GetUserActiveDecks(ctx context.Context, in *proto1.User, out *proto1.Decks) error {
	return h.CardDeckHandler.GetUserActiveDecks(ctx, in, out)
}

func (h *cardDeckHandler) AddUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error {
	return h.CardDeckHandler.AddUserActiveDeck(ctx, in, out)
}

func (h *cardDeckHandler) DeleteUserActiveDeck(ctx context.Context, in *proto1.DeckRequest, out *proto1.Success) error {
	return h.CardDeckHandler.DeleteUserActiveDeck(ctx, in, out)
}
