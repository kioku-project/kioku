// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/collaboration/proto/collaboration.proto

package collaboration

import (
	fmt "fmt"
	proto1 "github.com/kioku-project/kioku/pkg/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Collaboration service

func NewCollaborationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Collaboration service

type CollaborationService interface {
	GetGroupInvitations(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Groups, error)
	GetUserGroups(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Groups, error)
	CreateNewGroupWithAdmin(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error)
	GetGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error)
	ModifyGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error)
	DeleteGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error)
	GetGroupMembers(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.GroupMembers, error)
	GetGroupMemberRequests(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.GroupMembers, error)
	GetInvitationsForGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.GroupMembers, error)
	GetGroupUserRole(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error)
	FindGroupByID(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error)
	AddGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error)
	RemoveGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error)
	ModifyGroupUserRequest(ctx context.Context, in *proto1.GroupModUserRequest, opts ...client.CallOption) (*proto1.Success, error)
	KickGroupUser(ctx context.Context, in *proto1.GroupModUserRequest, opts ...client.CallOption) (*proto1.Success, error)
	AddGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, opts ...client.CallOption) (*proto1.Success, error)
	RemoveGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, opts ...client.CallOption) (*proto1.Success, error)
	LeaveGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error)
	LeaveGroupSafe(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error)
}

type collaborationService struct {
	c    client.Client
	name string
}

func NewCollaborationService(name string, c client.Client) CollaborationService {
	return &collaborationService{
		c:    c,
		name: name,
	}
}

func (c *collaborationService) GetGroupInvitations(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Groups, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupInvitations", in)
	out := new(proto1.Groups)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetUserGroups(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*proto1.Groups, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetUserGroups", in)
	out := new(proto1.Groups)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) CreateNewGroupWithAdmin(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error) {
	req := c.c.NewRequest(c.name, "Collaboration.CreateNewGroupWithAdmin", in)
	out := new(proto1.Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroup", in)
	out := new(proto1.Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) ModifyGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.ModifyGroup", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) DeleteGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.DeleteGroup", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroupMembers(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.GroupMembers, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupMembers", in)
	out := new(proto1.GroupMembers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroupMemberRequests(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.GroupMembers, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupMemberRequests", in)
	out := new(proto1.GroupMembers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetInvitationsForGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.GroupMembers, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetInvitationsForGroup", in)
	out := new(proto1.GroupMembers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) GetGroupUserRole(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error) {
	req := c.c.NewRequest(c.name, "Collaboration.GetGroupUserRole", in)
	out := new(proto1.Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) FindGroupByID(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Group, error) {
	req := c.c.NewRequest(c.name, "Collaboration.FindGroupByID", in)
	out := new(proto1.Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) AddGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.AddGroupUserRequest", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) RemoveGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.RemoveGroupUserRequest", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) ModifyGroupUserRequest(ctx context.Context, in *proto1.GroupModUserRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.ModifyGroupUserRequest", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) KickGroupUser(ctx context.Context, in *proto1.GroupModUserRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.KickGroupUser", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) AddGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.AddGroupUserInvite", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) RemoveGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.RemoveGroupUserInvite", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) LeaveGroup(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.LeaveGroup", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationService) LeaveGroupSafe(ctx context.Context, in *proto1.GroupRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Collaboration.LeaveGroupSafe", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collaboration service

type CollaborationHandler interface {
	GetGroupInvitations(context.Context, *proto1.User, *proto1.Groups) error
	GetUserGroups(context.Context, *proto1.User, *proto1.Groups) error
	CreateNewGroupWithAdmin(context.Context, *proto1.GroupRequest, *proto1.Group) error
	GetGroup(context.Context, *proto1.GroupRequest, *proto1.Group) error
	ModifyGroup(context.Context, *proto1.GroupRequest, *proto1.Success) error
	DeleteGroup(context.Context, *proto1.GroupRequest, *proto1.Success) error
	GetGroupMembers(context.Context, *proto1.GroupRequest, *proto1.GroupMembers) error
	GetGroupMemberRequests(context.Context, *proto1.GroupRequest, *proto1.GroupMembers) error
	GetInvitationsForGroup(context.Context, *proto1.GroupRequest, *proto1.GroupMembers) error
	GetGroupUserRole(context.Context, *proto1.GroupRequest, *proto1.Group) error
	FindGroupByID(context.Context, *proto1.GroupRequest, *proto1.Group) error
	AddGroupUserRequest(context.Context, *proto1.GroupRequest, *proto1.Success) error
	RemoveGroupUserRequest(context.Context, *proto1.GroupRequest, *proto1.Success) error
	ModifyGroupUserRequest(context.Context, *proto1.GroupModUserRequest, *proto1.Success) error
	KickGroupUser(context.Context, *proto1.GroupModUserRequest, *proto1.Success) error
	AddGroupUserInvite(context.Context, *proto1.GroupInviteRequest, *proto1.Success) error
	RemoveGroupUserInvite(context.Context, *proto1.GroupInviteRequest, *proto1.Success) error
	LeaveGroup(context.Context, *proto1.GroupRequest, *proto1.Success) error
	LeaveGroupSafe(context.Context, *proto1.GroupRequest, *proto1.Success) error
}

func RegisterCollaborationHandler(s server.Server, hdlr CollaborationHandler, opts ...server.HandlerOption) error {
	type collaboration interface {
		GetGroupInvitations(ctx context.Context, in *proto1.User, out *proto1.Groups) error
		GetUserGroups(ctx context.Context, in *proto1.User, out *proto1.Groups) error
		CreateNewGroupWithAdmin(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error
		GetGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error
		ModifyGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error
		DeleteGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error
		GetGroupMembers(ctx context.Context, in *proto1.GroupRequest, out *proto1.GroupMembers) error
		GetGroupMemberRequests(ctx context.Context, in *proto1.GroupRequest, out *proto1.GroupMembers) error
		GetInvitationsForGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.GroupMembers) error
		GetGroupUserRole(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error
		FindGroupByID(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error
		AddGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error
		RemoveGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error
		ModifyGroupUserRequest(ctx context.Context, in *proto1.GroupModUserRequest, out *proto1.Success) error
		KickGroupUser(ctx context.Context, in *proto1.GroupModUserRequest, out *proto1.Success) error
		AddGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, out *proto1.Success) error
		RemoveGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, out *proto1.Success) error
		LeaveGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error
		LeaveGroupSafe(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error
	}
	type Collaboration struct {
		collaboration
	}
	h := &collaborationHandler{hdlr}
	return s.Handle(s.NewHandler(&Collaboration{h}, opts...))
}

type collaborationHandler struct {
	CollaborationHandler
}

func (h *collaborationHandler) GetGroupInvitations(ctx context.Context, in *proto1.User, out *proto1.Groups) error {
	return h.CollaborationHandler.GetGroupInvitations(ctx, in, out)
}

func (h *collaborationHandler) GetUserGroups(ctx context.Context, in *proto1.User, out *proto1.Groups) error {
	return h.CollaborationHandler.GetUserGroups(ctx, in, out)
}

func (h *collaborationHandler) CreateNewGroupWithAdmin(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error {
	return h.CollaborationHandler.CreateNewGroupWithAdmin(ctx, in, out)
}

func (h *collaborationHandler) GetGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error {
	return h.CollaborationHandler.GetGroup(ctx, in, out)
}

func (h *collaborationHandler) ModifyGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error {
	return h.CollaborationHandler.ModifyGroup(ctx, in, out)
}

func (h *collaborationHandler) DeleteGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error {
	return h.CollaborationHandler.DeleteGroup(ctx, in, out)
}

func (h *collaborationHandler) GetGroupMembers(ctx context.Context, in *proto1.GroupRequest, out *proto1.GroupMembers) error {
	return h.CollaborationHandler.GetGroupMembers(ctx, in, out)
}

func (h *collaborationHandler) GetGroupMemberRequests(ctx context.Context, in *proto1.GroupRequest, out *proto1.GroupMembers) error {
	return h.CollaborationHandler.GetGroupMemberRequests(ctx, in, out)
}

func (h *collaborationHandler) GetInvitationsForGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.GroupMembers) error {
	return h.CollaborationHandler.GetInvitationsForGroup(ctx, in, out)
}

func (h *collaborationHandler) GetGroupUserRole(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error {
	return h.CollaborationHandler.GetGroupUserRole(ctx, in, out)
}

func (h *collaborationHandler) FindGroupByID(ctx context.Context, in *proto1.GroupRequest, out *proto1.Group) error {
	return h.CollaborationHandler.FindGroupByID(ctx, in, out)
}

func (h *collaborationHandler) AddGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error {
	return h.CollaborationHandler.AddGroupUserRequest(ctx, in, out)
}

func (h *collaborationHandler) RemoveGroupUserRequest(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error {
	return h.CollaborationHandler.RemoveGroupUserRequest(ctx, in, out)
}

func (h *collaborationHandler) ModifyGroupUserRequest(ctx context.Context, in *proto1.GroupModUserRequest, out *proto1.Success) error {
	return h.CollaborationHandler.ModifyGroupUserRequest(ctx, in, out)
}

func (h *collaborationHandler) KickGroupUser(ctx context.Context, in *proto1.GroupModUserRequest, out *proto1.Success) error {
	return h.CollaborationHandler.KickGroupUser(ctx, in, out)
}

func (h *collaborationHandler) AddGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, out *proto1.Success) error {
	return h.CollaborationHandler.AddGroupUserInvite(ctx, in, out)
}

func (h *collaborationHandler) RemoveGroupUserInvite(ctx context.Context, in *proto1.GroupInviteRequest, out *proto1.Success) error {
	return h.CollaborationHandler.RemoveGroupUserInvite(ctx, in, out)
}

func (h *collaborationHandler) LeaveGroup(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error {
	return h.CollaborationHandler.LeaveGroup(ctx, in, out)
}

func (h *collaborationHandler) LeaveGroupSafe(ctx context.Context, in *proto1.GroupRequest, out *proto1.Success) error {
	return h.CollaborationHandler.LeaveGroupSafe(ctx, in, out)
}
