syntax = "proto3";

import "pkg/proto/common.proto";

package collaborationService;

option go_package ="github.com/kioku-project/kioku/services/collaboration/proto;collaboration";


service Collaboration {
	rpc GetGroupInvitations(common.User) returns (common.Groups) {}
	rpc GetUserGroups(common.User) returns (common.Groups) {}
	rpc CreateNewGroupWithAdmin(common.GroupRequest) returns (common.Group) {}
	rpc GetGroup(common.GroupRequest) returns (common.Group) {}
	rpc ModifyGroup(common.GroupRequest) returns (common.Success) {}
	rpc DeleteGroup(common.GroupRequest) returns (common.Success) {}
	rpc GetGroupMembers(common.GroupRequest) returns (common.GroupMembers) {}
	rpc GetGroupMemberRequests(common.GroupRequest) returns (common.GroupMembers) {}
	rpc GetInvitationsForGroup(common.GroupRequest) returns (common.GroupMembers) {}
	rpc GetGroupUserRole(common.GroupRequest) returns (common.Group) {}
	rpc FindGroupByID(common.GroupRequest) returns (common.Group) {}

	rpc AddGroupUserRequest(common.GroupRequest) returns (common.Success) {}
	rpc RemoveGroupUserRequest(common.GroupRequest) returns (common.Success) {}
	rpc ModifyGroupUserRequest(common.GroupModUserRequest) returns (common.Success) {}
	rpc KickGroupUser(common.GroupModUserRequest) returns (common.Success) {}
	rpc AddGroupUserInvite(common.GroupInviteRequest) returns (common.Success) {}
	rpc RemoveGroupUserInvite(common.GroupInviteRequest) returns (common.Success) {}
	rpc LeaveGroup(common.GroupRequest) returns (common.Success) {}
	rpc LeaveGroupSafe(common.GroupRequest) returns (common.Success) {}
}
