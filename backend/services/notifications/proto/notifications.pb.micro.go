// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/notifications/proto/notifications.proto

package notifications

import (
	fmt "fmt"
	proto1 "github.com/kioku-project/kioku/pkg/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Notifications service

func NewNotificationsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Notifications service

type NotificationsService interface {
	Subscribe(ctx context.Context, in *PushSubscriptionRequest, opts ...client.CallOption) (*PushSubscription, error)
	Unsubscribe(ctx context.Context, in *PushSubscriptionRequest, opts ...client.CallOption) (*proto1.Success, error)
}

type notificationsService struct {
	c    client.Client
	name string
}

func NewNotificationsService(name string, c client.Client) NotificationsService {
	return &notificationsService{
		c:    c,
		name: name,
	}
}

func (c *notificationsService) Subscribe(ctx context.Context, in *PushSubscriptionRequest, opts ...client.CallOption) (*PushSubscription, error) {
	req := c.c.NewRequest(c.name, "Notifications.Subscribe", in)
	out := new(PushSubscription)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsService) Unsubscribe(ctx context.Context, in *PushSubscriptionRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Notifications.Unsubscribe", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifications service

type NotificationsHandler interface {
	Subscribe(context.Context, *PushSubscriptionRequest, *PushSubscription) error
	Unsubscribe(context.Context, *PushSubscriptionRequest, *proto1.Success) error
}

func RegisterNotificationsHandler(s server.Server, hdlr NotificationsHandler, opts ...server.HandlerOption) error {
	type notifications interface {
		Subscribe(ctx context.Context, in *PushSubscriptionRequest, out *PushSubscription) error
		Unsubscribe(ctx context.Context, in *PushSubscriptionRequest, out *proto1.Success) error
	}
	type Notifications struct {
		notifications
	}
	h := &notificationsHandler{hdlr}
	return s.Handle(s.NewHandler(&Notifications{h}, opts...))
}

type notificationsHandler struct {
	NotificationsHandler
}

func (h *notificationsHandler) Subscribe(ctx context.Context, in *PushSubscriptionRequest, out *PushSubscription) error {
	return h.NotificationsHandler.Subscribe(ctx, in, out)
}

func (h *notificationsHandler) Unsubscribe(ctx context.Context, in *PushSubscriptionRequest, out *proto1.Success) error {
	return h.NotificationsHandler.Unsubscribe(ctx, in, out)
}
