// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/srs/proto/srs.proto

package srs

import (
	fmt "fmt"
	proto1 "github.com/kioku-project/kioku/pkg/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Srs service

func NewSrsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Srs service

type SrsService interface {
	Push(ctx context.Context, in *SrsPushRequest, opts ...client.CallOption) (*proto1.Success, error)
	Pull(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Card, error)
	AddUserCardBinding(ctx context.Context, in *BindingRequest, opts ...client.CallOption) (*proto1.Success, error)
	GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*UserDueResponse, error)
	GetUserCardsDue(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*UserDueResponse, error)
}

type srsService struct {
	c    client.Client
	name string
}

func NewSrsService(name string, c client.Client) SrsService {
	return &srsService{
		c:    c,
		name: name,
	}
}

func (c *srsService) Push(ctx context.Context, in *SrsPushRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Srs.Push", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsService) Pull(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*proto1.Card, error) {
	req := c.c.NewRequest(c.name, "Srs.Pull", in)
	out := new(proto1.Card)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsService) AddUserCardBinding(ctx context.Context, in *BindingRequest, opts ...client.CallOption) (*proto1.Success, error) {
	req := c.c.NewRequest(c.name, "Srs.AddUserCardBinding", in)
	out := new(proto1.Success)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsService) GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, opts ...client.CallOption) (*UserDueResponse, error) {
	req := c.c.NewRequest(c.name, "Srs.GetDeckCardsDue", in)
	out := new(UserDueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsService) GetUserCardsDue(ctx context.Context, in *proto1.User, opts ...client.CallOption) (*UserDueResponse, error) {
	req := c.c.NewRequest(c.name, "Srs.GetUserCardsDue", in)
	out := new(UserDueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Srs service

type SrsHandler interface {
	Push(context.Context, *SrsPushRequest, *proto1.Success) error
	Pull(context.Context, *proto1.DeckRequest, *proto1.Card) error
	AddUserCardBinding(context.Context, *BindingRequest, *proto1.Success) error
	GetDeckCardsDue(context.Context, *proto1.DeckRequest, *UserDueResponse) error
	GetUserCardsDue(context.Context, *proto1.User, *UserDueResponse) error
}

func RegisterSrsHandler(s server.Server, hdlr SrsHandler, opts ...server.HandlerOption) error {
	type srs interface {
		Push(ctx context.Context, in *SrsPushRequest, out *proto1.Success) error
		Pull(ctx context.Context, in *proto1.DeckRequest, out *proto1.Card) error
		AddUserCardBinding(ctx context.Context, in *BindingRequest, out *proto1.Success) error
		GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, out *UserDueResponse) error
		GetUserCardsDue(ctx context.Context, in *proto1.User, out *UserDueResponse) error
	}
	type Srs struct {
		srs
	}
	h := &srsHandler{hdlr}
	return s.Handle(s.NewHandler(&Srs{h}, opts...))
}

type srsHandler struct {
	SrsHandler
}

func (h *srsHandler) Push(ctx context.Context, in *SrsPushRequest, out *proto1.Success) error {
	return h.SrsHandler.Push(ctx, in, out)
}

func (h *srsHandler) Pull(ctx context.Context, in *proto1.DeckRequest, out *proto1.Card) error {
	return h.SrsHandler.Pull(ctx, in, out)
}

func (h *srsHandler) AddUserCardBinding(ctx context.Context, in *BindingRequest, out *proto1.Success) error {
	return h.SrsHandler.AddUserCardBinding(ctx, in, out)
}

func (h *srsHandler) GetDeckCardsDue(ctx context.Context, in *proto1.DeckRequest, out *UserDueResponse) error {
	return h.SrsHandler.GetDeckCardsDue(ctx, in, out)
}

func (h *srsHandler) GetUserCardsDue(ctx context.Context, in *proto1.User, out *UserDueResponse) error {
	return h.SrsHandler.GetUserCardsDue(ctx, in, out)
}
